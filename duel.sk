#------------------------------------------------
#
#			Auteur : WeBer_Le_Pecheur (mail : rouer69@hotmail.fr)
#			Pour : Mineskill
#			Requis : Skript
#			Testé sous : Skript 2.3-beta4, TuSke-1.8.3-v3
#
#------------------------------------------------
#
#			1 world 2 kit 3 arene 4 joueur
#			1 option 11 world 12 kit 13 arene 2 joueur
#
#------------------------------------------------

options:
	
	commande.global : duel
	commande.admin : sduel
	
	permission.global : mineskill.duel.use
	permission.admin : mineskill.admin
	
	prefix.global : §e[§9Duel§e]
	prefix.debug : §e[§dDEBUG§e]
	prefix.erreur : §e[§4Erreur§e]
	
	gui.adversaire.titre : §3Choisissez votre adversaire
	gui.adversaire.description : §9Clic pour choisir cet adversaire.
	gui.adversaire.confirmation : §3Affronter §6%{_v}% §3?
	gui.adversaire.confirmation.oui : §2Oui
	gui.adversaire.confirmation.non : §4Non
	
	gui.kit.titre : §3Choisissez votre kit
	gui.kit.nom : §dKit de %{duel::1::2::%{_i}%::1}%
	gui.kit.description : §9Clic pour choisir ce kit.
	
	message.adversaire.invitation.envoie : §2Vous avez envoyé une invitation en duel à §6%{_v}%§2.
	message.adversaire.invitation.accepter : §6%{_v}% §9a accepté votre invitation en duel.
	message.adversaire.invitation.refuser : §6%{_v}% §ca refusé votre invitation en duel.
	message.adversaire.invitation.erreur.state.2 : §cVotre adversaire est déjà en duel.
	
	message.permission.soi : §cVous n'avez pas la permission d'utiliser cette commande.
	message.permission.autre : §cVotre adversaire ne possèdent pas la permission pour reçevoir l'invitation.
	message.maintenance : §cLes duels sont en maintenance.
	
function PlayerData(player: player, type: text) :: boolean:
	{_type} is "save":
		add {_player} to {duel::2::*}
		loop {duel::2::*}:
			loop-value is {_player}
			set {duel::2::%loop-index%::1} to {_player}'s location
			set {duel::2::%loop-index%::2} to {_player}'s gamemode
			set {duel::2::%loop-index%::3} to {_player}'s health
			set {duel::2::%loop-index%::4} to {_player}'s food level
			# set {duel::2::%loop-index%::5} to {_player}'s potion effect	# TODO: Récupérer les données sur PotionEffect.LivingEntity
			loop 41 times:
				set {duel::2::%loop-index-1%::%(loop-number + 4)%} to slot (loop-number - 1) of {_player}'s inventory
			return true
			stop
	{_type} is "restore":
		loop {duel::2::*}:
			loop-value is {_player}
			teleport {_player} to {duel::2::%loop-index%::1}
			remove all potion effect from {_player}
			set {_player}'s gamemode to {duel::2::%loop-index%::2}
			set {_player}'s health to {duel::2::%loop-index%::3}
			set {_player}'s food level to {duel::2::%loop-index%::4}
			# set {_player}'s potion effect to {duel::2::%loop-index%::5}	# TODO: Récupérer les données sur PotionEffect.LivingEntity
			loop 41 times:
				set slot (loop-number - 1) of {_player}'s inventory to {duel::2::%loop-index-1%::%(loop-number + 4)%}
			return true
			stop
	{_type} contain "kit":
		set {_kit::*} to {_type} split by "||"
		loop {duel::2::*}:
			loop-index is {_kit::2}
			set {_player}'s gamemode to survival
			set {_player}'s health to 10
			set {_player}'s food level to 20
			loop 41 times:
				set slot (loop-number - 1) of {_player}'s inventory to {duel::2::%loop-index-1%::%(loop-number + 1)%}
			apply jump boost 250 to {_player} for 1 days
			apply slowness 250 to {_player} for 1 days
			apply blindness 250 to {_player} for 1 days
			apply resistance 250 to {_player} for 1 days
			return true
			stop
	return false	# Return false si le joueur/kit n'existe pas

# 0 maintenance 
function DuelState(player: player, state: number):: boolean:
	{_state} = 0:	# Maintenance ?	# TODO: Rendre plus clair ce morceau
		loop 3 times:
			size of {duel::1::%loop-number%::*} = 0:	# world, kit, arene set?
				return false
				stop #
		# {duel::1::4} is false:	# mode maintenance
			# return false
			# stop
		# return true
		return false if {duel::1::4} is false else true	# À tester, otherwise 'set {_return} to false is {duel::1::4} is false else true'
	{_state} = 1:	# Choix de l'adversaire
		set {_loop} to online players count
		set {_size} to 1
		while {_pass} isn't set:	# TODO: Rendre le calcul plus efficace (plus court?)
			{_loop} <= 9:
				set {_pass} to true
			else:
				remove 9 from {_loop}
				add 1 to {_size}
		open virtual chest inventory with size {_size} named "{@gui.adversaire.titre}" to {_player}
		set {_slot} to 0	# Il y a plus efficace mais en attendant..
		loop all players:
			set {_v} to loop-player parsed as offlineplayer	# Parse nécessaire?
			make gui slot {_slot} of {_player} with player head named "%{_v}%" with lore "§r" and "{@gui.adversaire.description}" to run:	# player head, tete personnalisé broken depuis 2.3-ExprSkull.java
				open virtual chest inventory with size 3 named "{@gui.adversaire.confirmation}" to {_player}
				loop 9 times:
					make a gui slot (loop-number - 1) of {_player} with yellow stained glass pane named "§r" to nothing
					make a gui slot (loop-number + 17) of {_player} with yellow stained glass pane named "§r" to nothing
				make a gui slot 12 of {_player} with green wool named "{@gui.adversaire.confirmation.oui}" to run:
					close {_player}'s inventory
					{duel::2::*} do not contain {_v}:
						send "{@message.adversaire.invitation.envoie}"
					else:
						send "{@message.adversaire.invitation.erreur.state.2}"
				make a gui slot 14 of {_player} with red wool named "{@gui.adversaire.confirmation.non}" to run:
					DuelState({_player}, 1)
	{_state} = 2:	# Choix du kit
		set {_loop} to size of {duel::1::2::*}
		set {_size} to 1
		while {_pass} isn't set:	# TODO: Rendre le calcul plus efficace (plus court?)
			{_loop} <= 9:
				set {_pass} to true
			else:
				remove 9 from {_loop}
				add 1 to {_size}
		open virtual chest inventory with size {_size} named "{@gui.kit.titre}" to {_player}
		loop {duel::1::2::*}:
			set {_i} to loop-index parsed as number
			make gui slot ({_i} - 1) of {_player} with {duel::1::2::%{_i}%::2} named "{@gui.kit.nom}" with lore "§r" and "{@gui.kit.description}" to run:
				return PlayerData({_player}, "kit||%{_i}%")

command /{@commande.global} [<player>]:
	permission: {@permission.global}
	permission message: {@message.permission.soi}
	trigger:
		DuelState(player, 0) is true:
			
		else:
			send "{@prefix.erreur} {@message.maintenance}"
				